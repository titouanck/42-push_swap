Algorithm name : Djimo

Boucle tant que la pile a n'est pas  triée et contient plusieurs éléments:
	Si il reste 2 ou 3 éléments:
		Trier la pile a avec l'algorithme correspondant.
		BREAK ;
	Sinon
		On définit l'élément le plus proche dans la pile parmis \
		{plus petit, deuxième plus petit, plus grand, deuxième plus grand}.
		On met cet élément en haut de la pile.
		Si la pile a est triée:
			BREAK ;
		>> PUSH_B <<
		Si cet élément était le premier plus petit:
			Ne rien faire.
		Sinon si cet élément était le deuxième plus petit:
			On met l'élément le plus petit en haut de la pile.
			Si la pile a est triée:
				>> PUSH_A <<
				>> SWAP_A <<
			Sinon:
				>> PUSH_B <<
				>> SWAP_B <<
		Sinon si cet élément était le plus grand:
			>> ROTATE_B <<
		Sinon si cet élément était le deuxième plus grand:
			On met l'élément le plus grand en haut de la pile.
			>> PUSH_B <<
			>> ROTATE_B <<
			>> ROTATE_B <<
Boucle tant que la pile b n'est pas vide :
	Si a n'est pas vide \
	& que l'élément en haut de b est plus grand que celui en haut de a:
		BREAK ;
	Sinon
		>> PUSH_A <<
Boucle tant que la pile b n'est pas vide:
	>> REV_ROTATE_B <<
	>> PUSH_A <<
	>> ROTATE_A <<

=======> RESULTS <=======
1       |  OK  | 0
3       |  OK  | 1
5       |  OK  | 7
10      |  OK  | 24
15      |  OK  | 55
50      |  OK  | 322
100     |  OK  | 1054
500     |  OK  | 20911
1000    |  OK  | 78915

Situation a fixer: 4 5 6 1 2 3 7 8 9
	En manuel (15 coups):
		rra
		pb
		rra
		pb
		rra
		pb
		ra
		ra
		ra
		pa
		ra
		pa
		ra
		pa
		ra
	Djimo (22 coups):
		rra
		pb
		rra
		pb
		rb
		rra
		pb
		rb
		rra
		rra
		pb
		rra
		pa
		sa
		rrb
		pa
		ra
		rrb
		pa
		ra
		pa
		ra
